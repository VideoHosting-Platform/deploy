apiVersion: v1
kind: ConfigMap
metadata:
    name: nginx-config
data:
# index.html
    index.html: |
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Upload Video to MinIO</title>
            <style>
                #progressBar {
                    width: 100%;
                    background-color: #f3f3f3;
                    margin-top: 10px;
                }
                #progressBarFill {
                    height: 20px;
                    background-color: #4CAF50;
                    width: 0%;
                    text-align: center;
                    line-height: 20px;
                    color: white;
                }
            </style>
        </head>
        <body>
            <input type="file" id="videoUpload" accept="video/*">
            <button onclick="uploadVideo()">Upload</button>
            <div id="progressBar">
                <div id="progressBarFill">0%</div>
            </div>
            <div id="status"></div>

            <script src="https://cdn.jsdelivr.net/npm/aws-sdk@2.1498.0/dist/aws-sdk.min.js"></script>
            <script src="upload.js"></script>
        </body>
        </html>

    # upload.js
    upload.js: |
        const AWS = window.AWS;

        // Настройка клиента (указываем MinIO endpoint)
        const s3 = new AWS.S3({
            endpoint: "http://192.168.49.2:30090/",  // Адрес MinIO
            accessKeyId: "minioadmin",     // Логин MinIO
            secretAccessKey: "minioadmin", // Пароль MinIO
            s3ForcePathStyle: true,             // Обязательно для MinIO
            signatureVersion: "v4",             // Требуется для MinIO
            region: "us-east-1",                // Любой регион (MinIO игнорирует)
        });

        async function uploadVideo() {
            const fileInput = document.getElementById('videoUpload');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Выберите файл!');
                return;
            }

            const params = {
                Bucket: "videos",
                Key: `${file.name}`,
                Body: file,
                ContentType: file.type,
            };

            try {
                const data = await s3.upload(params).promise();
                console.log("Файл загружен:", data.Location);
                return data.Location;
            } catch (err) {
                console.error("Ошибка загрузки:", err);
                throw err;
            }
        }

    nginx.conf: |
        user  nginx;
        worker_processes  auto;

        error_log  /var/log/nginx/error.log notice;
        pid        /var/run/nginx.pid;

        events {
            worker_connections  1024;
        }

        http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;

            log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

            access_log  /var/log/nginx/access.log  main;

            sendfile        on;
            keepalive_timeout  65;

            # Критически важные настройки для больших файлов
            client_max_body_size 10G;
            proxy_request_buffering off;
            proxy_buffering off;

            include /etc/nginx/conf.d/*.conf;
        }

    # nginx.conf
    default.conf: |
        server {
            listen 80;
            server_name _;
            charset utf-8;

            # Статика
            root /usr/share/nginx/html;
            location / {
                try_files $uri $uri/ /index.html;
            }

            # API
            location /api/ {
                proxy_pass http://fastapi-service.default.svc.cluster.local:8000/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_http_version 1.1;
                
                # Подмена MinIO URL
                        # Подменяем внутренний адрес MinIO на публичный NodePort
                sub_filter 'http://minio.minio.svc.cluster.local:9000' 'http://$host:30090';
                sub_filter_once off;
                sub_filter_types application/json;
            }

            # MinIO (особые настройки!)
            location ~ ^/minio(/|$) {
                    # Безопасность
                client_max_body_size 0;
                proxy_request_buffering off;

                access_log /var/log/nginx/minio_access.log main;
                error_log /var/log/nginx/minio_error.log notice;
                
                # Проксирование
                proxy_pass http://minio.minio.svc.cluster.local:9000$uri$is_args$args;
                proxy_http_version 1.1;
                
                # Заголовки
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Таймауты
                proxy_connect_timeout 600s;
                proxy_send_timeout 600s;
                proxy_read_timeout 600s;
                send_timeout 600s;
                
                # Дополнительные параметры
                proxy_next_upstream off;
                proxy_set_header Connection "";
                chunked_transfer_encoding off;
            }
        }