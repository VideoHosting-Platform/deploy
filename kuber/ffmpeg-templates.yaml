apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: video-processing-templates
  namespace: argo
spec:
  templates:
  # Шаблоны для параллельной обработки
    - name: process-4K
      parallelism: 2
      steps:
      - - name: process-high
          template: process-4K-high
      - - name: process-low
          template: process-480p-low
    - name: process-2k
      parallelism: 2 #?
      steps:
      - - name: process-high
          template: process-2k-high
      - - name: process-low
          template: process-480p-low
    - name: process-1080p
      parallelism: 2
      steps:
      - - name: process-high
          template: process-1080p-high
      - - name: process-low
          template: process-480p-low
    
    - name: process-4K-high
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: workflow.argoproj.io/workflow
                operator: Exists
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values: ["high"]
      container:
        image: ffmpeg-minio
        command: ["sh", "-c"]
        args:
          - |
            mc cp "{{inputs.parameters.video_path}}" /tmp/input.mp4
            ffmpeg -i /tmp/input.mp4 \
              -filter_complex "
                [v]split=4[4k][2k][1080][720];
                [4k]scale=4096:-2[4kout];
                [2k]scale=1920:-2[2kout];
                [1080]scale=1920:-2[1080out];
                [720]scale=1280:-2[720out]
              " \
              -map "[4kout]" -c:v libx264 -crf 20 -preset slower \
              -map "[2kout]" -c:v libx264 -crf 22 -preset slow \
              -map "[1080out]" -c:v libx264 -crf 23 -preset medium \
              -map "[720out]" -c:v libx264 -crf 23 -preset fast \
              -map a:0 -c:a aac -b:a 192k \
              -f hls -hls_time 10 \
              output_high_%v.m3u8
            mc cp output_high_* s3/processed/
    
    - name: process-2K-high
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: workflow.argoproj.io/workflow
                operator: Exists
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values: ["high"]
      container:
        image: ffmpeg-minio
        command: ["sh", "-c"]
        args:
          - |
            mc cp "{{inputs.parameters.video_path}}" /tmp/input.mp4
            ffmpeg -i input_2k.mp4 \
              -filter_complex "
                [v]split=3[2k][1080][720];
                [2k]scale=1920:-2[2kout];
                [1080]scale=1920:-2[1080out];
                [720]scale=1280:-2[720out]
              " \
              -map "[2kout]" -c:v:0 libx264 -crf 22 -preset slow \
              -map "[1080out]" -c:v:1 libx264 -crf 23 -preset medium \
              -map "[720out]" -c:v:2 libx264 -crf 23 -preset fast \
              -map a:0 -c:a aac -b:a 128k \
              -f hls -hls_time 10 \
              output_high_%v.m3u8
            mc cp output_high_* s3/processed/
      
    - name: process-1080p-high
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: workflow.argoproj.io/workflow
                operator: Exists
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values: ["high"]
      container:
        image: ffmpeg-minio
        command: ["sh", "-c"]
        args:
          - |
            mc cp "{{inputs.parameters.video_uri}}" /tmp/input.mp4
            ffmpeg -i input_1080p.mp4 \
              -filter_complex "
                [v]split=2[1080][720];
                [1080]scale=1920:-2[1080out];
                [720]scale=1280:-2[720out]
              " \
              -map "[1080out]" -c:v:0 libx264 -crf 23 -preset medium \
              -map "[720out]" -c:v:1 libx264 -crf 23 -preset fast \
              -map a:0 -c:a aac -b:a 128k \
              -f hls -hls_time 10 \
              output_high_%v.m3u8
            mc cp output_high_* s3/processed/

    # Общий шаблон для низких разрешений
    - name: process-480p-low
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values: ["low"]
      container:
        image: ffmpeg-minio
        command: ["sh", "-c"]
        args:
          - |
            ffmpeg -i /tmp/input.mp4 \
              -filter_complex "
                [v]split=4[480][360][240][144];
                [480]scale=640:-2[480out];
                [360]scale=480:-2[360out];
                [240]scale=360:-2[240out];
                [144]scale=256:-2[144out]
              " \
              -map "[480out]" -c:v libx264 -crf 23 -preset veryfast \
              -map "[360out]" -c:v libx264 -crf 23 -preset veryfast \
              -map "[240out]" -c:v libx264 -crf 23 -preset superfast \
              -map "[144out]" -c:v libx264 -crf 23 -preset ultrafast \
              -map a:0 -c:a aac -b:a 64k \
              -f hls -hls_time 10 \
              output_low_%v.m3u8
            mc cp output_low_* s3/processed/

    - name: process-480p
      inputs:
        parameters:
          - name: video_path
          - name: uuid
      container:
        image: danilukumnik/ffmpeg-minio:alpine-1.14
        command: ["sh", "-c"]
        args:
          - |
            set -ex
            mc alias set kubemc http://minio.minio.svc.cluster.local:9000 minioadmin minioadmin --api S3v4
            
            # Подготовка директорий
            output_dir="/tmp/output_$(date +%s)"
            mkdir -p "$output_dir"
            chmod -R 777 "$output_dir"
            
            # Загрузка исходного файла
            local_path="/tmp/input_$(date +%s).mp4"
            mc cp "kubemc/videos/{{inputs.parameters.video_path}}" "$local_path" || { echo "Failed to download"; exit 1; }
            
            # Кодирование с правильным распределением потоков
            ffmpeg -threads 2 -i "$local_path" \
              -filter_complex \
                "[0:v]split=4[480][360][240][144]; \
                [480]scale=854:480[480out]; \
                [360]scale=640:360[360out]; \
                [240]scale=426:240[240out]; \
                [144]scale=256:144[144out]" \
              -map "[480out]" -c:v:0 libx264 -preset medium \
                -b:v:0 1500k -maxrate:v:0 1500k -minrate:v:0 1500k -bufsize:v:0 3000k \
                -g 48 -keyint_min 48 -sc_threshold 0 \
              -map "[360out]" -c:v:1 libx264 -preset medium \
                -b:v:1 1000k -maxrate:v:1 1000k -minrate:v:1 1000k -bufsize:v:1 2000k \
                -g 48 -keyint_min 48 -sc_threshold 0 \
              -map "[240out]" -c:v:2 libx264 -preset medium \
                -b:v:2 500k -maxrate:v:2 500k -minrate:v:2 500k -bufsize:v:2 1000k \
                -g 48 -keyint_min 48 -sc_threshold 0 \
              -map "[144out]" -c:v:3 libx264 -preset medium \
                -b:v:3 300k -maxrate:v:3 300k -minrate:v:3 300k -bufsize:v:3 600k \
                -g 48 -keyint_min 48 -sc_threshold 0 \
              -map 0:a -c:a:0 aac -b:a:0 96k -ac 2 \
              -map 0:a -c:a:1 aac -b:a:1 96k -ac 2 \
              -map 0:a -c:a:2 aac -b:a:2 96k -ac 2 \
              -map 0:a -c:a:3 aac -b:a:3 96k -ac 2 \
              -f hls -hls_time 5 -hls_list_size 0 -hls_playlist_type vod \
              -hls_segment_type mpegts -hls_flags independent_segments \
              -var_stream_map "v:0,a:0,name:480p v:1,a:1,name:360p v:2,a:2,name:240p v:3,a:3,name:144p" \
              -master_pl_name "master.m3u8" \
              -hls_segment_filename "$output_dir/%v_%03d.ts" \
              "$output_dir/%v.m3u8" || { echo "FFmpeg failed"; exit 1; }
            
            # Проверка и загрузка
            ls -la "$output_dir" || { echo "No output files"; exit 1; }
            mc cp --recursive "$output_dir/" "kubemc/videos/{{inputs.parameters.uuid}}/" || { echo "Upload failed"; exit 1; }
            
            # Очистка
            rm -f "$local_path"
            rm -rf "$output_dir"
            echo "Processing completed successfully"

    - name: process-360p
      inputs:
        parameters:
          - name: video_path
          - name: uuid
      container:
        image: danilukumnik/ffmpeg-minio:alpine-1.14
        command: ["sh", "-c"]
        args:
          - |
            set -x
            mc alias set kubemc http://minio.minio.svc.cluster.local:9000 minioadmin minioadmin --api S3v4
            
                    # Копируем файл с оригинальным именем
            minio_path="kubemc/videos/{{inputs.parameters.video_path}}"
            local_path="/tmp/$(basename "{{inputs.parameters.video_path}}")"
            
            echo "Copying $minio_path to $local_path"
            mc cp "$minio_path" "$local_path" || { echo "Failed to copy file"; exit 1; }
            
            # Создание директории для выходных файлов
            mkdir -p /tmp/output/{{inputs.parameters.uuid}}

            ffmpeg -i "$local_path" \
              -filter_complex \
                "[0:v]split=3[v1][v2][v3]; \
                [v1]scale=-2:360[v1out]; \
                [v2]scale=-2:240[v2out]; \
                [v3]scale=-2:144[v3out]" \
              -map "[v1out]" -c:v:0 libx264 -x264-params "nal-hrd=cbr:force-cfr=1" \
                -b:v:0 1000k -maxrate:v:0 1000k -minrate:v:0 1000k -bufsize:v:0 2000k \
                -preset slow -g 48 -sc_threshold 0 -keyint_min 48 \
              -map "[v2out]" -c:v:1 libx264 -x264-params "nal-hrd=cbr:force-cfr=1" \
                -b:v:1 500k -maxrate:v:1 500k -minrate:v:1 500k -bufsize:v:1 1000k \
                -preset slow -g 48 -sc_threshold 0 -keyint_min 48 \
              -map "[v3out]" -c:v:2 libx264 -x264-params "nal-hrd=cbr:force-cfr=1" \
                -b:v:2 300k -maxrate:v:2 300k -minrate:v:2 300k -bufsize:v:2 600k \
                -preset slow -g 48 -sc_threshold 0 -keyint_min 48 \
              -map a:0 -c:a:0 aac -b:a:0 64k -ac 2 \
              -map a:0 -c:a:1 aac -b:a:1 64k -ac 2 \
              -map a:0 -c:a:2 aac -b:a:2 64k -ac 2 \
              -f hls \
              -hls_time 5 \
              -hls_list_size 0 \
              -hls_playlist_type vod \
              -hls_segment_type mpegts \
              -hls_flags independent_segments \
              -var_stream_map "v:0,a:0,name:360p v:1,a:1,name:240p v:2,a:2,name:144p" \
              -hls_segment_filename "/tmp/output/{{inputs.parameters.uuid}}/%v-{{inputs.parameters.uuid}}%05d.ts" \
              "/tmp/output/{{inputs.parameters.uuid}}/%v-{{inputs.parameters.uuid}}.m3u8"
            
            mc cp --recursive /tmp/output/{{inputs.parameters.uuid}}/ kubemc/videos/{{inputs.parameters.uuid}}/
            rm -f "$local_path"
            rm -rf "$output_dir"

    - name: process-240p
      inputs:
        parameters:
          - name: video_path
          - name: uuid
      container:
        image: danilukumnik/ffmpeg-minio:alpine-1.14
        command: ["sh", "-c"]
        args:
          - |
            set -x
            mc alias set kubemc http://minio.minio.svc.cluster.local:9000 minioadmin minioadmin --api S3v4
            
                    # Копируем файл с оригинальным именем
            minio_path="kubemc/videos/{{inputs.parameters.video_path}}"
            local_path="/tmp/$(basename "{{inputs.parameters.video_path}}")"
            
            echo "Copying $minio_path to $local_path"
            mc cp "$minio_path" "$local_path" || { echo "Failed to copy file"; exit 1; }
            
            # Создание директории для выходных файлов
            mkdir -p /tmp/output/{{inputs.parameters.uuid}}

                    # Обработка только 240p и 144p
            ffmpeg -i "$local_path" \
              -filter_complex \
                "[0:v]split=2[v1][v2]; \
                [v1]scale=-2:240[v1out]; \
                [v2]scale=-2:144[v2out]" \
              -map "[v1out]" -c:v:0 libx264 -x264-params "nal-hrd=cbr:force-cfr=1" \
                -b:v:0 500k -maxrate:v:0 500k -minrate:v:0 500k -bufsize:v:0 1000k \
                -preset slow -g 48 -sc_threshold 0 -keyint_min 48 \
              -map "[v2out]" -c:v:1 libx264 -x264-params "nal-hrd=cbr:force-cfr=1" \
                -b:v:1 300k -maxrate:v:1 300k -minrate:v:1 300k -bufsize:v:1 600k \
                -preset slow -g 48 -sc_threshold 0 -keyint_min 48 \
              -map a:0 -c:a:0 aac -b:a:0 64k -ac 2 \
              -map a:0 -c:a:1 aac -b:a:1 64k -ac 2 \
              -f hls \
              -hls_time 5 \
              -hls_list_size 0 \
              -hls_playlist_type vod \
              -hls_segment_type mpegts \
              -hls_flags independent_segments \
              -var_stream_map "v:0,a:0,name:240p v:1,a:1,name:144p" \
              -hls_segment_filename "/tmp/output/{{inputs.parameters.uuid}}/%v-{{inputs.parameters.uuid}}%05d.ts" \
              "/tmp/output/{{inputs.parameters.uuid}}/%v-{{inputs.parameters.uuid}}.m3u8"

            mc cp --recursive /tmp/output/{{inputs.parameters.uuid}}/ kubemc/videos/{{inputs.parameters.uuid}}/
            rm -f "$local_path"
            rm -rf "$output_dir"

    - name: process-144p
      inputs:
        parameters:
          - name: video_path
          - name: uuid
      container:
        image: danilukumnik/ffmpeg-minio:alpine-1.14
        command: ["sh", "-c"]
        args:
          - |
            set -x
            mc alias set kubemc http://minio.minio.svc.cluster.local:9000 minioadmin minioadmin --api S3v4
            
                    # Копируем файл с оригинальным именем
            minio_path="kubemc/videos/{{inputs.parameters.video_path}}"
            local_path="/tmp/$(basename "{{inputs.parameters.video_path}}")"
            
            echo "Copying $minio_path to $local_path"
            mc cp "$minio_path" "$local_path" || { echo "Failed to copy file"; exit 1; }
            
            # Создание директории для выходных файлов
            mkdir -p /tmp/output/{{inputs.parameters.uuid}}

            ffmpeg -i $local_path \
              -vf "scale=-2:144" \
              -c:v libx264 -x264-params "nal-hrd=cbr:force-cfr=1" \
              -b:v 200k -maxrate 200k -minrate 200k -bufsize 400k \
              -preset slow -g 48 -sc_threshold 0 -keyint_min 48 \
              -c:a aac -b:a 48k -ac 2 \
              -f hls \
              -hls_time 5 \
              -hls_list_size 0 \
              -hls_playlist_type vod \
              -hls_segment_type mpegts \
              -hls_flags independent_segments \
              -hls_segment_filename "/tmp/output/{{inputs.parameters.uuid}}/144p-{{inputs.parameters.uuid}}%05d.ts" \
              "/tmp/output/{{inputs.parameters.uuid}}/144p-{{inputs.parameters.uuid}}.m3u8"
            
            mc cp --recursive /tmp/output/{{inputs.parameters.uuid}}/ kubemc/videos/{{inputs.parameters.uuid}}/
            rm -f "$local_path"
            rm -rf "$output_dir"